Antes de começar o projeto faça o setup seguindo o Primeiro e Segundo passo. Depois pode seguir da primeira versão em diante.

Primeiro passo: Instale o NODEJS no seu PC

Segundo passo: O professor recomenda que você instale a lib http-server, mas você pode usar o express, serviço gratuito da aws, ou fazer de outra maneira para subir um servidor local. Inclusive pode usar o github pages que é gratuito.

No histórico de versão anterior, o professor recomendou que utilizemos o devtolls do google pelo chrome para visualizar como a aplicação ficaria no mobile. Essa técnica é chamada de Mobile First, algo assim. Consiste em desenvolver do micro para o macro

Outra dica importante é que é habitual os devs de front começarem a estilização do site pelo chrome, para visualizar como o site está ficando. Depois de que verificou que as edições ficaram boas é que se replica esta estilização no css do projeto

Dica 3: Estudar mais sobre o protocolo http, caso vá trabalhar com web

Entendendo protocolo http:

GERAL:

1 - acesse uma página web e entre no devtools (f12).

2- Selecione Network e em Name selecione uma opção de requisição para analisar.

3 - Vá em Headers, na janela ao lado. na guia Geral você verá a requisição feita pelo browser; O método usado pela requisição; O status code (o retorno deste método). O código 200 no status code refere-se ao retorno com sucesso.

URL PATH E MÉTODO:

A URL é composta por IP/Path (é o caminho que serve para identificar o recurso).

IP: https://seusite.com (Existe algum servidor de DNS faz a conversão de domínio para IP. Por isso o domínio é o IP na web).

(PESQUISAR MAIS SOBRE IP E DOMÍNIO)

<<SUPOSIÇÃO>> Acredito que o IP seja mesmo em formáto numérico, pois o local host é referenciado como números. Também no serviço gratuito da AWS o seu IP público é um número. Talvez este servidor dns sirva para converter estes números de IP para o domínio.
No caso o que o servidor dns está fazendo nesta aula, é mostrar o IP original do domínio x.

PATH: .../cadastro-de-cliente/cliente-joao-dos-anzois . É o caminho dos recursos. Cada recurso necessário compõe um path.

Request Methods: Métodos de solicitações/requisições feitos para o servidor. Ou seja, toda requisição sobre um recurso, o método diz o que o usuário quer fazer com aquele recurso. Principalmente nas APIs padrão REST.


GET: Com o IP/Path o servidor entende que você está solicitando/requisitando um recurso X, e lhe devolve o mesmo quando o encontra.
- Significa que você está buscando alguma coisa.
- Você pode filtrar a busca

POST: Com o IP/Path o servidor entende que você está solicitando/requisitando a INSERÇÃO de um item no recurso de destino.

PUT: Com o IP/Path/(número de id) o servidor entende que você está solicitando/requisitando a ATUALIZAÇÃO de um  item dentro do recurso de destino.

DELETE: Com o IP/Path/(número de id) o servidor entende que você está solicitando/requisitando a REMOÇÃO de um item dentro do recurso de destino.

A primeira área de transferência de dados é o próprio PATH 

A segunda área de transferência de dados é a query string

QUERY STRING: é uma espécie de parâmetro posta no após o PATH, com chave e valor. Ex: IP/PATH?(query string)type=grass
- Contatenação de parâmetros no query string: adicione um & após o primeiro parâmetro e passe o novo parâmetro. Ex: IP/PATH?(query string)type=grass&name=i 

REQUEST-HEADERS: São meta-dados(configurações) da requisição. A configuração da requisição é feita pelo browser (client).

exemplo: accept-languages: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7,gl;q=0.6

Neste caso o cliente está especificando as prioridades de linguagens para aquela requisição. Tendo como 1, prioridade máxima, e seus sucessores, como 0.9, 0.8, 0.7 ... suas prioridades mínimas.
pt-BR prioridade 1 = 1.0
pt-PT prioridade 2 = 0.9
en-US prioridade 3 = 0.8
...
gl(global) prioridade final = 0.6 (retorne qualquer linguagem, caso não tenha encontrado as linguagens de maior prioridade).

RESPONSE-HEADERS: São as configurações devolvidas pelo servidor. Após a requisição do client estas são as devolutas do server.

BODY: Dependendo do tipo de método usado, o body (área de dados) pode existir ou não. Ele é o corpo da requisição, o dados que será usado para realizar o tráfego. Pode-se entender como os dados que foram obtidos do servidor, a resposta própriamente dita.

exemplo:

request-header:
content-type: applications/json

request-body
{
    "name": "Galinhagartixa"
}

STATUS CODE: Retorna o estado da sua requisição

família 200 - 299 (SUCESSO)

família 300 - 399 (REDIRECT)

família 400 - 499 (ERROR por parte do client)

família 500 - 599 (ERROR interno no servidor)

COMEÇANDO A CONFIGURAR O SCRIPT:

1 - Criar uma requisição para o pokeapi usando a lib(library) Fetch API. Esta é uma lib padrão dos browsers.

2 - Para saber mais como ela funciona busque no google.

CRIANDO MÉTODO GET NO JS:

1 - Utilize a URL como fonte de pesquisa da requisição. Para isso salve-a em uma variável

2 - Criamos variáveis de controle da página e da quantidade de pokemons, estas são "offset" e "limit"

3 - Criamos a function Fetch(url) que retorna uma promise (uma promessa de um retorno, caso todos os parâmetros sejam atendidos). Para chegar ao sucesso de uma promise, utilizamos o método ".then()".
O Fetch por padrão usa o método GET. Também retorna por padrão uma string de dados em seu body.

4 - para usar os dados do body, vamos precisar converter os dados do tipo string em json.

5 - O response possui um método .json que retorna uma PROMISE de qualquer dado inserido. Resumindo, converte para o formato json a string recebida. Por o .json também ser uma PROMISE, você poderá ter a mesma estrutura do FETCH. Portanto poderá replicar o modelo de estrutura.

6 - evite callbacks prolixos.

ARROW FUNCTION: É uma sintaxe reduzida da definição de uma função.
- muito utilizada em callbacks
- se você tiver apenas uma linha como retorno, não precisa declarar o corpo da função.

<<pesquisar mais sobre callback>>

exemplo: da linha 6:11 no main.js na primeira versão do exercício.

fetch(url)
    .then(function(response) {
        response.json().then(function (responseBody) {
            console.log(responseBody);
        })
    })

Uma solução mais elegante e legível seria esta, na segunda versão do exercício.



Acesse o devtools >> guia Network >> Fetch/XHR (é onde acessamos todos os requests que criamos)

lembre-se de desabilitar o cache na guia network 

<<pesquisar mais sobre "Promise no HTTP PROTOCOL">>

DEBUGANDO CÓDIGO JS NO BROWSER:
- use a palavra reservada debugger no código e na hora de fazer o debugger no browser ele parará neste ponto.
- debugger no browser:
-- devtools >> Sources >> Page >> Encontre o arquivo JS lá dentro >> Clique na linha onde tem o debugger >> dê f5 >> na coluna ao lado terá uma setinha para avançar passo a passo no código 
-degugger no browser com a key debugger:
-- devtools >> source >> page >> encontre o arquivo JS lá dentro >> dê f5 (caso o arquivo já tenha sido aberto anteriormente) >> esc (para aparecer a guia console na parte inferior do browser) >> na coluna à direta tem os comando de passo a passo do debugger 

CRIANDO <li> PELO JS DE FORMA AUTOMATIZADA:
- no código HTML defina uma ID para um tipo de lista
- no JS acesse o ID desta lista. Acessando o documento, usando o método getElementById, referenciando o ID do tipo da lista, no código HTML
- para isso tudo ser realizado de fato, fiz uma variável no JS chamada pokemonList e adicionei um novo <li> a ela usando o a propriedade innerHTML

MAIN.JS pokeApi.getPokemons().then(pokemons) => {...}
- Aqui estamos fazendo uma conversão de objeto para HTML. O parâmetro que entra é do tipo obj e a saída é um <li> do tipo HTML.

MAP = função do JS para percorrer uma lista. Muito utilizada para fazer transformação de listas.
- reduz a verbosidade do for. Exemplo em main.js ln 30:31
- a função convertPokemonToLI é feita com a essencia da função MAP por tanto podemos utiliza-la:
-- 1: como arrow function. Também por ter uma única linha como retorno.
-- 2: devido as funções serem semelhantes, você pode coloca-las em uma unica linha adicionando o join ao final. exemplo ln 36
-- resumindo o Map pegou obj por obj mandou para o convertPokemonToLI, este converteu de obj para <li>. Por final o método join unificou todas as <li> dentro de pokemonList no HTML.

POKE-API.JS:
- Promise.all(), isto recebe um array de promises.
- getPokemons no return em Fetch(url)[RECAPTULANDO]:
-- recebemos uma promise do server, convertemos para uma lista string de pokemons, convertemos esta lista para json para receber apenas o results. Depois de convertido para json, utilizamos a lista json e transfomamos esta em uma lista de promises de detalhes do pokemon. Tratamos esta lista de promises, feita por último, para vir como json.