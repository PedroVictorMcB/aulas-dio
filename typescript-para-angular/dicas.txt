INSTALADOR DO TYPESCRIPT: https://www.typescriptlang.org/download

INSTALANDO TYPESCRIPT POR PROJETO:
 - Passo 1: crie um projeto node com o comando $ npm init -y
 - Passo 2: instale o typescript via cmd line $ npm install typescript --save-dev

UTILIZANDO TYPESCRIPT:
 - Para rodar um programa em TS você precisa transcrever para JS usando o comando no terminal: $ npx tsc arquivo
 - Ao criar uma função em TS, esta será replicada em JS, após o compilamento (comando na linha anterior). Isso resultará em erro no TS.

CARACTERÍSTICAS DO NODE:
 - O node não roda arquivo com extensão .ts

TYPESCRIPT CONFIGURAÇÃO:
 - $ npx tsc --init
 - O cmd acima gera um arquivo de configuração que você irá configurar para como ele deve se comportar no seu projeto
 - Dentro do arquivo você poderá editar as pré-configurações do seu TS.
 - Neste projeto habilitamos o "'rootDir:' './src'" e o "'outDir:' './build'". Os detalhas do que cada config faz estão especificados no comentário ao lado dentro do arquivo
 - Para rodar o arquivo assim que ele for compilado faça:
  - Em package.json:
   - Dentro de "script", coloque "start": "npx tsc && node build/index.js",
  - Agora execute o comando no terminal $ npm run start

DECLARANDO VARIÁVEL EM TS:
 - Você deve colocar o tipo da variável, o nome, o tipo da variável e o valor.
 - Modelo de declarações de variáveis no index.ts 
 - Variável do tipo Objeto:
  - É aquela que recebe qualquer Objeto como valor.
  - Você pode declarar Objetos de duas formas no TS:
   - Sem previsibilidade
   - Com previsibilidade
   - As duas maneiras estão comentadas no index.ts
   
TUPLAS:
 - São vetor de multi-types com valores específicos (um lugar certo para cada coisa)
 - Só podem receber a quantidade exata de valores, pré-definidas pela tupla.
 - Caso você coloque mais valores do que a tupla suporta, ocorrerá em erro.
 - Caso a ordem dos valores atribuidos à tupla não sejam equivalentes aos tipos pré-definidos da tupla, ocorrerá em erro.

TS NODE DEV:
 - O ts node dev é um servidor local que entende TypeScript. Ou seja, com ele instalado não há necessidade de criar builds em cima de builds
 - Para instalar use: $ npm install ts-node-dev -D 
 - No Package.json criamos um script novo chamado "start:dev", para reutilizar o comando. E configuramos ele com o $ --
 - Função:
  - Criar um servidor local e ficar respawnando builds na memória para não precisar gerar um build a cada teste.
 - Lembre-se de fechar o servidor com o $ crtl + C >> S

ANGULAR (FRAMEWORK)
 - É o framework usado pela Google até hoje.
 - Muito utiliza para criação de SPA (Single Pages Aplications - Aplicações baseadas em componentes)
 - Usado em sistemas robustos, não é viável utilizar em um sistema simples. Se você notar que seu sistema tem inclinação para desenvolver muito, use-o, se não, Web Standard já é o suficiente
 - Mercado de Frameworks:
  - React (Curva de aprendizado baixa - em pouco tempo você aprende a utiliza-lo)
  - Aurelia (Aproveita melhor o que a comunidade está produzindo)
  - Vue.js (Não precisa ficar fazendo vários setups. Escalável)
  - Angular (Útil quando se for trabalhar com uma equipe, onde várias pessoas vão estar trabalhando em cima dele. Não se preocupar com setups)

ANGULAR:
 - Desenvolvedor: Google
 - Definição: Frameworks (Impera na forma como você irá trabalhar)
 - Templating: HTML + TS
 - Binding (como as informações navegam entre componentes): 2 way data binding
  - As informações navegam de filho pra pai e vice e versa
 - DOM: regular DOM
 - Lógica de aplicação e controle de status: Services
 - APLICAÇÃO ANGULAR:
  - Montagem:
     - Injeção de Dependências:
      - É um padrão de desenvolvimento utilizado em diversos cenários diferentes, é uma estratégia de desenvolvimento muito utilizada.
      Consiste na utilização dos componentes em um componente raiz/root na aplicação. Este é o componente lógico, não tem partes visuais. No final o root é injetado no HTML.
 - Estrutura do Frameworks
  - Out Src:
   - Arquivos de configuração:
    - Angular.json: Todos os apontamentos e configurações ficam aqui dentro. Um caminha de uma imagem ou de um certo dado.
    - Package.json: Configuração do node.
    - TSConfig.json: Configuração do TypeScript.


REACT:
 - Desenvolvedor: Facebook
 - Definição: Library (Conjunto adicional de funções que você pode chamar quando necessário)
 - Templating: JS + JSX
 - Binding (como as informações navegam entre componentes): Uni-Directional
  - As informações passam do pai pro filho 
 - DOM: Virtual DOM
 - Lógica de aplicação e controle de status: flux (conceito) e Redux ou context api (controle de estádo)

 WEB APP:
  - Constituição
   - Components 
    - Vantagens: Isolar cada parte do código para que você consiga diminuir a complexidade do código e ao mesmo tempo você reaproveita ele mesmo.
    - Características:
     - É o atomo de sua aplicação. Você cria pedaços, peças singulares para compor uma aplicação completa. Juntando várias components você forma a aplicação completa.
     - É uma função JS/TS que retorna HTML, CSS e eventos JS. 
    - Características:
     - Elemento visual
     - Customizável
     - reutilizável
   - Gerenciamento de Estados
    - Função: Responsável por garantir que as informações dos componentes não estejam desincronizadas, facilitam a comunicação de um componente com outro. Gerencia a lógica entre os componentes.
    - Ferramentas: NGRX, NGXS
   - Roteamento / routing navegation:
    - função: Responável pela forma como você navega na aplicação, fazendo a troca de url sem precisar carregar a página, mudando somente os componentes que são mostrados.
    - Características: Cria a sensação de navegação de página, ao trocar os componentes.
    -Librarys:
     - History API (nativo do browser)
     - React-Router (React)
     - Vue-Router (Vuejs)
     - Angular RoutingModule
   - Renderização / Render:
    - Função: Responsável por decidir a melhor maneira de acessar e entregar para o browser o componente, pronto para que ele seja desenhado na janela sem compilações.
    Após a realização das três camadas anteriores Routes, compoenentes e Estados, ele junta tudo e entrega da melhor forma para o browser.
    - Estratégias de renderização:
     - 100% Server: Aplicação normal. Dependendo de qual rota a pessoa acessa no back-end, o render entrega aquele html
     - Part Server - Part Client: O servidor entrega a página acessada, mas tem coisas que serão montadas pelo lado do cliente
     - 100% Client: Tudo será montado do lado do client

ORGANIZAÇÃO DE PASTAS:
 - Todos os arquivos de configuração ficam na pasta externa
 - Todos os arquivos de código ficam na pasta src
 - Aplicação Básica em Angular:
  - Dica acesse este url para ver como funciona uma aplicação básica em Angular.
  
  https://stackblitz.com/edit/stackblitz-starters-yxxp7d?description=An%20angular-cli%20project%20based%20on%20@angular/animations,%20@angular/common,%20@angular/compiler,%20@angular/core,%20@angular/forms,%20@angular/platform-browser,%20@angular/platform-browser-dynamic,%20@angular/router,%20core-js,%20rxjs,%20tslib%20and%20zone.js&file=src%2Fmain.ts&title=Angular%20Starter

  - Dentro de src:
   - pasta APP
    - O primeiro componente: formado por html, ts e css
   - index.html 
   - main.ts: configuração da inicialização
   - polyfills.ts: serve para aumentar a compatibilidade com navegadores antigos
   - styles.css 
