INSTALADOR DO TYPESCRIPT: https://www.typescriptlang.org/download

INSTALANDO TYPESCRIPT POR PROJETO:
 - Passo 1: crie um projeto node com o comando $ npm init -y
 - Passo 2: instale o typescript via cmd line $ npm install typescript --save-dev

UTILIZANDO TYPESCRIPT:
 - Para rodar um programa em TS você precisa transcrever para JS usando o comando no terminal: $ npx tsc arquivo
 - Ao criar uma função em TS, esta será replicada em JS, após o compilamento (comando na linha anterior). Isso resultará em erro no TS.

CARACTERÍSTICAS DO NODE:
 - O node não roda arquivo com extensão .ts

TYPESCRIPT CONFIGURAÇÃO:
 - $ npx tsc --init
 - O cmd acima gera um arquivo de configuração que você irá configurar para como ele deve se comportar no seu projeto
 - Dentro do arquivo você poderá editar as pré-configurações do seu TS.
 - Neste projeto habilitamos o "'rootDir:' './src'" e o "'outDir:' './build'". Os detalhas do que cada config faz estão especificados no comentário ao lado dentro do arquivo
 - Para rodar o arquivo assim que ele for compilado faça:
  - Em package.json:
   - Dentro de "script", coloque "start": "npx tsc && node build/index.js",
  - Agora execute o comando no terminal $ npm run start

DECLARANDO VARIÁVEL EM TS:
 - Você deve colocar o tipo da variável, o nome, o tipo da variável e o valor.
 - Modelo de declarações de variáveis no index.ts 
 - Variável do tipo Objeto:
  - É aquela que recebe qualquer Objeto como valor.
  - Você pode declarar Objetos de duas formas no TS:
   - Sem previsibilidade
   - Com previsibilidade
   - As duas maneiras estão comentadas no index.ts
   
TUPLAS:
 - São vetor de multi-types com valores específicos (um lugar certo para cada coisa)
 - Só podem receber a quantidade exata de valores, pré-definidas pela tupla.
 - Caso você coloque mais valores do que a tupla suporta, ocorrerá em erro.
 - Caso a ordem dos valores atribuidos à tupla não sejam equivalentes aos tipos pré-definidos da tupla, ocorrerá em erro.

TS NODE DEV:
 - O ts node dev é um servidor local que entende TypeScript. Ou seja, com ele instalado não há necessidade de criar builds em cima de builds
 - Para instalar use: $ npm install ts-node-dev -D 
 - No Package.json criamos um script novo chamado "start:dev", para reutilizar o comando. E configuramos ele com o $ --
 - Função:
  - Criar um servidor local e ficar respawnando builds na memória para não precisar gerar um build a cada teste.
 - Lembre-se de fechar o servidor com o $ crtl + C >> S
